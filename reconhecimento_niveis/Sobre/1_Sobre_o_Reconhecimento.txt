-----Explicação Detalhada da Tecnologia de Reconhecimento Facial-----
Este documento descreve detalhadamente a tecnologia de reconhecimento facial utilizada no projeto.
A solução é dividida em duas etapas principais que trabalham em conjunto: a detecção de um rosto em uma imagem e o subsequente reconhecimento da identidade desse rosto.

1. Detecção de Rosto (Usando Haar Cascade)
Antes que o sistema possa reconhecer uma identidade, ele precisa primeiro localizar um rosto na imagem. Para isso, o projeto utiliza um classificador Haar Cascade, um modelo pré-treinado e amplamente utilizado para detecção de objetos.
O que ele faz: O classificador analisa a imagem em busca de padrões de luz e sombra que correspondem a características faciais universais, como a linha dos olhos sendo mais escura que a testa, ou o nariz projetando sombras específicas.
Nesta fase, o algoritmo não se preocupa com a identidade da pessoa, mas apenas em responder à pergunta: "Existe algo que se parece com um rosto aqui?".
Como funciona no código: A linha `cv2.CascadeClassifier('haarcascade_frontalface_default.xml')` carrega este modelo. Em seguida, a função `detectMultiScale()` é aplicada a cada quadro de vídeo, retornando as coordenadas (x, y, largura, altura) de todos os rostos que forem encontrados.

2. Reconhecimento de Rosto (Usando LBPH)
Uma vez que a localização de um rosto é conhecida, o sistema avança para a etapa de reconhecimento para determinar a identidade da pessoa. O projeto utiliza o algoritmo LBPH (Local Binary Patterns Histograms) para esta tarefa.

Como o Treinamento Acontece (função `treinar_e_salvar_modelo`):

Coleta de Dados: A função `obter_imagens_e_rotulos()` acessa a pasta `faces` e lê todas as imagens de cada subpasta de usuário. O nome da subpasta (um ID único) serve como o rótulo de identificação.
Processamento: Para cada imagem, o rosto detectado é convertido para escala de cinza (removendo informações de cor) e redimensionado para um tamanho padrão (ex: 200x200 pixels). Essa padronização é crucial para que o algoritmo possa comparar diferentes rostos de forma justa e consistente.
Análise de Padrões: O algoritmo LBPH analisa a textura de cada rosto em um nível microscópico. Ele olha para cada pixel e o compara com seus vizinhos, gerando um código binário que representa o padrão local.
Criação de Histograma: Ao final da análise de um rosto, o algoritmo cria um histograma (um gráfico estatístico) que resume todos os padrões de textura encontrados. Este histograma funciona como uma "assinatura digital" ou uma "impressão digital" daquele rosto.
Aprendizado: O processo é repetido para todas as fotos de todos os usuários. O sistema "aprende" a associar os histogramas de textura (as assinaturas) com os rótulos de identificação de cada pessoa.
Geração do Modelo: A função `reconhecedor.train()` compila todas essas informações em um único modelo treinado, que é essencialmente um mapa que liga padrões faciais a identidades.

**Otimização de Treinamento:**
Para tornar a inicialização do sistema mais rápida, o treinamento não é executado toda vez.
- **Salvar Modelo:** Após o primeiro treinamento, o modelo é salvo no arquivo `Modelo_Treinamento/modelo_lbph.yml`.
- **Carregar Modelo:** Nas execuções seguintes, o `app.py` simplesmente carrega este arquivo, pulando o processo de treinamento.
- **Retreinamento Automático:** Se os dados dos usuários forem alterados (adição, exclusão de pessoas ou fotos), o arquivo de modelo salvo é apagado, forçando um novo treinamento na próxima inicialização para garantir que o modelo esteja sempre atualizado.

Como o Reconhecimento Acontece (função `reconhecer_faces_webcam`):

Predição: Quando um rosto é detectado na webcam, o sistema calcula o histograma LBPH dele e o compara com os histogramas armazenados no modelo treinado. A função `reconhecedor.predict()` retorna o rótulo do usuário mais provável.
Valor de Confiança: Além do rótulo, a função retorna um valor de "confiança". Este valor é, na verdade, uma medida de distância:
- Um valor **baixo** (ex: 20) significa que a distância entre o rosto da webcam e um rosto do modelo é pequena, indicando uma **alta semelhança** e, portanto, alta confiança.
- Um valor **alto** (ex: 150) significa que a distância é grande, indicando **baixa semelhança**.

Lógica de Acesso: Uma variável `LIMITE_CONFIANCA` é usada como um limiar. Se a "distância" (confiança) for menor que o limite, o reconhecimento é considerado um sucesso. Caso contrário, o rosto é classificado como "Desconhecido".