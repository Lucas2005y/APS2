-----Explicação Detalhada do Projeto de Reconhecimento Facial em Python-----
Este documento explica o funcionamento do projeto de reconhecimento facial, que utiliza a biblioteca OpenCV e uma abordagem baseada em dados de treinamento locais.

---Visão Geral da Arquitetura---
O projeto é dividido em scripts principais, um módulo de utilidades e arquivos de dados, que trabalham juntos para criar um sistema completo e modular:

- **app.py:** O script principal que inicia o reconhecimento facial via webcam. É o ponto de entrada do sistema.
- **document_viewer.py:** A interface gráfica que exibe os documentos para usuários autorizados. Para usuários de Nível 3, este painel também se torna a tela de administração.
- **cadastro_app.py:** Um script que serve como um atalho para iniciar a interface de cadastro de novas pessoas.
- **utils_admin.py:** Um módulo centralizado que contém todas as funções de gerenciamento (criar usuário, adicionar fotos, excluir) e de manipulação de dados. Sua função é evitar a repetição de código e organizar a lógica do projeto.
- **Arquivos de Dados:** Pastas como `Usuarios_Cadastrados` e `Modelo_Treinamento` organizam os dados dos usuários e o modelo gerado pelo sistema, respectivamente.

---Como o Algoritmo Funciona (app.py)---
O processo de reconhecimento facial foi otimizado para ser mais eficiente.

1. Etapa de Inicialização:
- Ao ser executado, o `app.py` primeiro verifica se um modelo treinado (`modelo_lbph.yml`) já existe na pasta `Modelo_Treinamento`.
- **Se o modelo existe:** Ele é carregado instantaneamente, e o sistema fica pronto para o reconhecimento.
- **Se o modelo não existe:** O sistema inicia a etapa de treinamento a seguir.

2. Etapa de Treinamento (executada apenas quando necessário):
- Coleta de Dados: O script lê o arquivo `Usuarios_Cadastrados/userData.json` para obter os IDs únicos de cada pessoa. Em seguida, ele percorre a pasta `faces` para ler as imagens de cada usuário.
- Detecção e Processamento: Usando o `cv2.CascadeClassifier`, o sistema detecta o rosto em cada imagem, o converte para escala de cinza e o redimensiona para um tamanho padrão.
- Treinamento do Modelo: O modelo de reconhecimento `cv2.face.LBPHFaceRecognizer_create()` é então treinado com base nos padrões de textura extraídos dos rostos.
- **Salvamento do Modelo:** Após o treinamento, o modelo é salvo na pasta `Modelo_Treinamento`, pronto para ser reutilizado nas próximas execuções do programa.

3. Etapa de Reconhecimento (função `reconhecer_faces_webcam`):
- O script inicializa a webcam e começa a analisar o vídeo em tempo real, quadro a quadro.
- Para cada rosto detectado em um quadro, o modelo LBPH faz uma predição, retornando um ID e um valor de confiança.
- Se a confiança for alta (valor baixo), o script usa o ID para consultar os arquivos `userData.json` e `validation.json` para obter o nome e o nível de acesso do usuário, exibindo essas informações na tela.

---Funcionalidades de Gerenciamento de Usuários (via `document_viewer.py`)---
A interface `document_viewer.py` serve como o painel de administração para usuários de Nível 3. Os botões de gerenciamento nesta tela chamam as funções correspondentes do módulo `utils_admin.py`.
- **Criação de Usuário:** Inicia a interface para cadastrar uma nova pessoa e capturar suas fotos.
- **Adição de Fotos:** Permite adicionar mais fotos a um perfil existente para melhorar a precisão do reconhecimento.
- **Exclusão de Usuário:** Remove permanentemente o perfil de um usuário, incluindo seus dados e fotos.

Toda vez que uma dessas ações de gerenciamento é concluída com sucesso, o modelo de treinamento salvo (`modelo_lbph.yml`) é automaticamente excluído. Isso força o `app.py` a criar um novo modelo atualizado na próxima vez que for executado.

---Estrutura de Dados (JSON)---
Os arquivos JSON, localizados na pasta `Usuarios_Cadastrados`, são essenciais para a organização dos dados:
- **userData.json:** Atua como um banco de dados de usuários. A chave é o CPF, associado ao nome e a um ID único usado para a pasta de fotos.
- **validation.json:** Funciona como um controle de acesso. As chaves são os níveis ("Nivel 1", etc.), associadas a uma lista de CPFs com essa permissão.
- Essa separação garante que o ID único seja usado para o treinamento, evitando a exposição de dados pessoais no sistema de arquivos.